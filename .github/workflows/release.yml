name: Release

on:
  release:
    types: [published]

permissions:
  contents: read

env:
  PACKAGE_NAME: opsml_cli
  INTERPRETER: "3.8 3.9 3.10 3.11 3.12 pypy3.8 pypy3.9 pypy3.10"
  RUSTFLAGS: -C debuginfo=0

jobs:
  rust-lints-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        run: rustup override set stable && rustup update

      - name: Install clippy
        run: rustup component add clippy

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Run cargo tests
        run: |
          make format
          make lints
          make test.unit
        env:
          RUST_BACKTRACE: 1

      #- name: Gitleaks
      #  uses: gitleaks/gitleaks-action@v2
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  build-sdist:
    needs: [rust-lints-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          rust-toolchain: stable

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist

  build-ubuntu:
    needs: [rust-lints-test]
    name: build - ubuntu - ${{ matrix.manylinux }} - ${{ matrix.target }} - ${{ matrix.manylinux}}
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, x86, aarch64, armv7, ppc64le]
        manylinux: [auto]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - run: pip install -U twine

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --release --out dist --interpreter ${{ env.INTERPRETER }}
          rust-toolchain: stable
          docker-options: -e CI
          before-script-linux:
            | # ref: https://github.com/sfackler/rust-openssl/issues/2036#issuecomment-1724324145
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                sudo apt update -y && sudo apt-get install -y libssl-dev openssl pkg-config
            fi

      - run: ls -lh dist/

      - run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_ubuntu_${{ matrix.target }}_all_${{ matrix.manylinux }}
          path: dist

  build-ubuntu-musllinux:
    needs: [rust-lints-test]
    name: build - ubuntu - ${{ matrix.manylinux }} - ${{ matrix.target }} - ${{ matrix.manylinux}}
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, aarch64]
        manylinux: ["musllinux_1_1"]

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - run: pip install -U twine

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --release --out dist --interpreter ${{ env.INTERPRETER }}
          rust-toolchain: stable
          docker-options: -e CI
          before-script-linux:
            | # ref: https://github.com/sfackler/rust-openssl/issues/2036#issuecomment-1724324145
            # If we're running on rhel centos, install needed packages.
            if command -v yum &> /dev/null; then
                yum update -y && yum install -y perl-core openssl openssl-devel pkgconfig libatomic

                # If we're running on i686 we need to symlink libatomic
                # in order to build openssl with -latomic flag.
                if [[ ! -d "/usr/lib64" ]]; then
                    ln -s /usr/lib/libatomic.so.1 /usr/lib/libatomic.so
                fi
            else
                # If we're running on debian-based system.
                sudo apt update -y && sudo apt-get install -y libssl-dev openssl pkg-config
            fi

      - run: ls -lh dist/

      - run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_ubuntu_${{ matrix.target }}_all_${{ matrix.manylinux }}
          path: dist

  build-macos:
    needs: [rust-lints-test]
    name: build - macos - (${{ matrix.target }} - ${{ matrix.manylinux}}
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64, aarch64]
        manylinux: [auto]

    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - run: pip install -U twine

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --interpreter ${{ env.INTERPRETER }}
          rust-toolchain: stable
          docker-options: -e CI

      - run: ls -lh dist/

      - run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_macos_${{ matrix.target }}_all_${{ matrix.manylinux }}
          path: dist

  build-windows:
    needs: [rust-lints-test]
    name: build - windows -(${{ matrix.target }} - ${{ matrix.interpreter || 'all' }} - ${{ matrix.python-architecture}}
    strategy:
      fail-fast: false
      matrix:
        target: [x64, x86]
        os: [windows]
        include:
          - target: i686
            python-architecture: x86
            interpreter: 3.8 3.9 3.10 3.11
          - target: x64
            python-architecture: x64
            interpreter: 3.8 3.9 3.10 3.11 3.12 pypy3.8 pypy3.9 pypy3.10
          - target: aarch64
            interpreter: 3.11
        exclude:
          - target: x86
          - target: x64

    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - run: pip install -U twine

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --interpreter ${{ matrix.interpreter || env.INTERPRETER }}
          rust-toolchain: stable

      - run: dir dist/

      - run: twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_windows_${{ matrix.target }}_all
          path: dist

  inspect-pypi-assets:
    needs:
      [
        build-ubuntu,
        build-ubuntu-musllinux,
        build-macos,
        build-windows,
        build-sdist,
      ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - name: list dist files
        run: |
          ls -lh dist/
          ls -l dist/
          echo "`ls dist | wc -l` files"

  test-builds-os:
    name: test build on ${{ matrix.os }}
    needs:
      [
        build-ubuntu,
        build-ubuntu-musllinux,
        build-macos,
        build-windows,
        build-sdist,
      ]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]

    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create virtual environment
        run: |
          python -m venv .venv
          echo "$GITHUB_WORKSPACE/rusty-logger/.venv/bin" >> $GITHUB_PATH

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_${{ matrix.os }}_*
          merge-multiple: true
          path: dist

      - run: pip install opsml_cli --no-index --no-deps --find-links dist --force-reinstall

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test-builds-os]

    steps:
      - uses: actions/checkout@v4

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable
      - run: |
          export VERSION=$(cargo pkgid | cut -d "#" -f2)
          echo "version: $VERSION"
          echo "tag: $GITHUB_REF_NAME"
          test "v$VERSION" "=" "$GITHUB_REF_NAME"

      - name: set up python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - run: pip install -U twine

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - run: twine check --strict dist/*

      - name: upload to pypi
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
